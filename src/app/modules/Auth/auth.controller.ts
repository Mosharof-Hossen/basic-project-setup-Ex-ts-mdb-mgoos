import { JwtPayload } from "jsonwebtoken";
import catchAsync from "../../utils/catchAsync";
import sendResponse from "../../utils/sendResponse";
import { AuthServices } from "./auth.services";
import config from "../../config";
import AppError from "../../errors/AppError";

const loginUser = catchAsync(async (req, res) => {
    const result = await AuthServices.loginUser(req.body);
    res.cookie("refreshToken", result.refreshToken, {
        secure: config.node_env === 'production',
        httpOnly: true
    })
    sendResponse(res, {
        statusCode: 200,
        success: true,
        message: "User is logged in successfully.",
        data: result
    })
})
const changePassword = catchAsync(async (req, res) => {
    // console.log(req.user, req.body);
    const result = await AuthServices.changePassword(req.user as JwtPayload, req.body);


    sendResponse(res, {
        statusCode: 200,
        success: true,
        message: "User changed password successfully.",
        data: result
    })
})

const refreshToken = catchAsync(async (req, res) => {
    const { refreshToken } = req.cookies;
    const result = await AuthServices.refreshToken(refreshToken);

    sendResponse(res, {
        statusCode: 200,
        success: true,
        message: "Token generated by refresh token.",
        data: result
    })
})

const forgetPassword = catchAsync(async (req, res) => {
    const result = await AuthServices.forgetPassword(req.body.id)

    sendResponse(res, {
        statusCode: 200,
        success: true,
        message: "Reset link generated successfully",
        data: result
    })
})
const resetPassword = catchAsync(async (req, res) => {
    const token = req.headers.authorization
    if (!token) {
        throw new AppError(401, "You are not authorized ")
    }
    const result = await AuthServices.resetPassword(req.body, token);

    sendResponse(res, {
        statusCode: 200,
        success: true,
        message: "Password reset successfully",
        data: result
    })
})

export const AuthController = {
    loginUser,
    changePassword,
    refreshToken,
    forgetPassword,
    resetPassword
}